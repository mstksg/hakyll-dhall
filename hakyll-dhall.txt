-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Dhall compiler for Hakyll
--   
--   Please see the README on GitHub at
--   <a>https://github.com/mstksg/hakyll-dhall#readme</a>
@package hakyll-dhall
@version 0.1.0.0


-- | Hakyll compiler and loader for Dhall files. Functions are intended to
--   track all local dependencies within the project directory, so rebuilds
--   are properly triggered on up-stream imports. Provides options for
--   customizing rebuilding behavior for network, environment variable, and
--   non-project local files.
module Hakyll.Web.Dhall

-- | Options for loading Dhall files
data DhallCompilerOptions a
DCO :: DhallResolver a -> Set DhallCompilerTrust -> Bool -> Bool -> DhallCompilerOptions a

-- | Method to resolve imports encountered in files. See documentation of
--   <a>DhallResolver</a> for more details.
[dcoResolver] :: DhallCompilerOptions a -> DhallResolver a

-- | Set of "trusted" import behaviors. Files with external references or
--   imports that aren't described in this set are always rebuilt every
--   time.
--   
--   Default: <tt><a>singleton</a> <a>DCTRemote</a></tt>
--   
--   That is, do not trust any dependencies on the local disk outside of
--   the project directory, but trust that any URL imports remain
--   unchanged.
[dcoTrust] :: DhallCompilerOptions a -> Set DhallCompilerTrust

-- | Strictly for usage with <a>dhallCompiler</a> and family: should the
--   result be "minimized" (all in one line) or pretty-printed for human
--   readability?
--   
--   Can be useful for saving bandwidth.
--   
--   Default: <a>False</a>
[dcoMinimize] :: DhallCompilerOptions a -> Bool

-- | If <a>True</a>, reduce expressions to normal form before using them.
--   Otherwise, attempts to do no normalization and presents the file as-is
--   (stripping out comments and annotations)
--   
--   Default: <a>True</a>
[dcoNormalize] :: DhallCompilerOptions a -> Bool

-- | Types of external imports that a Dhall file may have.
data DhallCompilerTrust

-- | File on local filesystem outside of project directory, and therefore
--   not tracked by Hakyll
DCTLocal :: DhallCompilerTrust

-- | Link to remote resource over a network connection
DCTRemote :: DhallCompilerTrust

-- | Reference to environment variable on machine
DCTEnv :: DhallCompilerTrust

-- | Default <a>DhallCompilerOptions</a>. If the type variable is not
--   inferrable, it can be helpful to use <i>TypeApplications</i> syntax:
--   
--   <pre>
--   <tt>defaultCompilerOptions</tt> @Import         -- do not resolve imports
--   <tt>defaultCompilerOptions</tt> @X              -- resolve imports
--   </pre>
defaultDhallCompilerOptions :: DefaultDhallResolver a => DhallCompilerOptions a

-- | Method for resolving imports.
--   
--   The choice will determine the type of expression that
--   <a>loadDhallExpr</a> and family will produce.
data DhallResolver :: Type -> Type

-- | Leave imports as imports, but optionally remap the destinations.
--   
--   Default: leave imports unchanged
[DRRaw] :: {drRemap :: Import -> Compiler Import} -> DhallResolver Import

-- | Completely resolve all imports in IO. All imports within Hakyll
--   project are tracaked, and changes to dependencies will trigger
--   rebuilds upstream.
[DRFull] :: DhallResolver X

-- | Helper typeclass to allow functions to be polymorphic over different
--   <a>DhallResolver</a> types.
--   
--   Provides default behavior for each resolver type.
class DefaultDhallResolver a
defaultDhallResolver :: DefaultDhallResolver a => DhallResolver a

-- | Load a value of type <tt>a</tt> that is parsed from a Dhall file at
--   the given <a>Identifier</a>. Tracks dependencies within project.
loadDhall :: Type a -> Identifier -> Compiler (Item a)

-- | Version of <a>loadDhall</a> taking custom <a>DhallCompilerOptions</a>.
loadDhallWith :: DhallCompilerOptions X -> Type a -> Identifier -> Compiler (Item a)

-- | Load and parse the body of the given <a>Identifier</a> as a Dhall
--   expression.
--   
--   If you wrap the result in <a>DExpr</a>, you can save the result as a
--   snapshot.
loadDhallExpr :: DefaultDhallResolver a => Identifier -> Compiler (Item (Expr Src a))

-- | Version of <a>loadDhallExpr</a> taking custom
--   <a>DhallCompilerOptions</a>.
loadDhallExprWith :: DhallCompilerOptions a -> Identifier -> Compiler (Item (Expr Src a))

-- | Newtype wrapper over <tt><a>Expr</a> <a>Src</a> a</tt> (A Dhall
--   expression) with an appropriate <a>Binary</a> instance, meant to be
--   usable as a compilable Hakyll result that can be saved with
--   <a>saveSnapshot</a>, <a>load</a>, etc.
newtype DExpr a
DExpr :: Expr Src a -> DExpr a
[getDExpr] :: DExpr a -> Expr Src a

-- | Compile the Dhall file as text according to default
--   <a>DhallCompilerOptions</a>. Note that this is polymorphic over both
--   "raw" and "fully resolved" versions; it must be called with
--   <i>TypeApplications</i>
--   
--   <pre>
--   <a>dhallRawCompiler</a>  = <a>dhallCompiler</a> <tt><a>Import</a>
--   <a>dhallFullCompiler</a> = <a>dhallCompiler</a> </tt><a>X</a>
--   </pre>
--   
--   It might be more convenient to just use <a>dhallRawCompiler</a> or
--   <a>dhallFullCompiler</a>.
dhallCompiler :: forall a. (DefaultDhallResolver a, Pretty a) => Compiler (Item String)

-- | Compile the Dhall file as text according to default
--   <a>DhallCompilerOptions</a> while leaving all imports unchanged and
--   unresolved.
dhallRawCompiler :: Compiler (Item String)

-- | Compile the Dhall file as text according to default
--   <a>DhallCompilerOptions</a>, resolving all imports in IO.
dhallFullCompiler :: Compiler (Item String)

-- | <a>dhallCompiler</a>, but with custom <a>DhallCompilerOptions</a>.
dhallCompilerWith :: Pretty a => DhallCompilerOptions a -> Compiler (Item String)

-- | Parse a Dhall source.
--   
--   This encapsulates the "magic" of tracking dependencies. Any local
--   dependencies within the project directory are tracked by Hakyll, and
--   so modifications to required files will also cause upstream files to
--   be rebuilt.
parseDhallWith :: DhallCompilerOptions a -> Identifier -> Text -> Compiler (Item (Expr Src a))

-- | Version of <a>parseDhallWith</a> that only acceps the <a>DRRaw</a>
--   resolver, remapping the imports with the function in the <a>DRRaw</a>.
parseRawDhallWith :: DhallCompilerOptions Import -> Identifier -> Text -> Compiler (Item (Expr Src Import))

-- | Resolve all imports in a parsed Dhall expression.
--   
--   Implemented so that any local dependencies within the project
--   directory are tracked by Hakyll, and so modifications to required
--   files will also cause upstream files to be rebuilt.
resolveDhallImports :: DhallCompilerOptions X -> Identifier -> Expr Src Import -> Compiler (Expr Src X)
instance GHC.Generics.Generic (Hakyll.Web.Dhall.DhallCompilerOptions a)
instance GHC.Classes.Ord Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Classes.Eq Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Show.Show Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Generics.Generic Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Generics.Generic (Hakyll.Web.Dhall.DExpr a)
instance (Hakyll.Web.Dhall.DefaultDhallResolver a, Data.Text.Prettyprint.Doc.Internal.Pretty a) => Data.Binary.Class.Binary (Hakyll.Web.Dhall.DExpr a)
instance Hakyll.Web.Dhall.DefaultDhallResolver Dhall.Core.Import
instance Hakyll.Web.Dhall.DefaultDhallResolver Dhall.TypeCheck.X
instance Hakyll.Web.Dhall.DefaultDhallResolver a => Data.Default.Class.Default (Hakyll.Web.Dhall.DhallCompilerOptions a)
instance Data.Text.Prettyprint.Doc.Internal.Pretty a => Hakyll.Core.Writable.Writable (Hakyll.Web.Dhall.DExpr a)
