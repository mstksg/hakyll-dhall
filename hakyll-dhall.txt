-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Dhall compiler for Hakyll
--   
--   Hakyll compiler and loader for Dhall files. Functions are intended to
--   track all local dependencies within the project directory, so rebuilds
--   are properly triggered on up-stream imports. Provides options for
--   customizing rebuilding behavior for network, environment variable, and
--   non-project local files.
--   
--   See README.md for more information.
@package hakyll-dhall
@version 0.2.2.2


-- | Hakyll compiler and loader for Dhall files. Functions are intended to
--   track all local dependencies within the project directory, so rebuilds
--   are properly triggered on up-stream imports. Provides options for
--   customizing rebuilding behavior for network, environment variable, and
--   non-project local files.
--   
--   There are three major workflows:
--   
--   <ol>
--   <li><a>dExprCompiler</a>, <a>loadDhall</a>, and <a>dhallCompiler</a>,
--   for loading underlying Dhall files, saving them into the Hakyll cache
--   and later interpreting them as values.</li>
--   <li><a>parseDhall</a> and <a>parseDhallExpr</a>, for parsing Dhall
--   expressions provided as strings, and resolving them while tracking
--   dependencies.</li>
--   <li><a>dhallPrettyCompiler</a>, for processing and re-formatting Dhall
--   files and presenting them as-is as a "final end-point".</li>
--   </ol>
module Hakyll.Web.Dhall

-- | Newtype wrapper over <tt><a>Expr</a> <a>Src</a> a</tt> (A Dhall
--   expression) with an appropriate <a>Binary</a> instance, meant to be
--   usable as a compilable Hakyll result that can be saved with
--   <a>saveSnapshot</a>, <a>load</a>, etc.
newtype DExpr a
DExpr :: Expr Src a -> DExpr a
[getDExpr] :: DExpr a -> Expr Src a

-- | Compile the underlying text file as a Dhall expression, wrapped in a
--   <a>DExpr</a> newtype. Mostly useful for pre-cacheing fully resolved
--   Dhall expressions into the Hakyll cache, which you can later interpret
--   and load with <a>loadDhall</a> or <a>loadDhallSnapshot</a>. A
--   <tt><a>DExpr</a> a</tt> is an <tt><a>Expr</a> <a>Src</a> a</tt>, but
--   wrapped so that it has a <a>Binary</a> instance that is usable by the
--   Hakyll cache. Tracks all dependencies, so will trigger rebuilds of
--   items that depend on it if any downstream dhall files are modified.
--   
--   For example, here is a rule to parse and cache all Dhall files in the
--   directory ./config:
--   
--   <pre>
--   <tt>match</tt> "config/**.dhall" $ do
--       <tt>route</tt> <a>mempty</a>
--       <tt>compile</tt> $ <a>dExprCompiler</a> @<a>X</a>
--   </pre>
--   
--   This will save all of the dhall files in the directory ./config in the
--   Hakyll cache. They can later be loaded and interpreted in the
--   <a>Compiler</a> monad using:
--   
--   <pre>
--   <a>loadDhall</a> <a>auto</a> "config/my_config.dhall"
--   </pre>
--   
--   This is mostly useful for routes that match many different files which
--   will be interpreted as values of different types, or for caching a
--   single expression that you might want to interpret as different types
--   later. If you want to parse and immediately interpret, see
--   <a>dhallCompiler</a>.
--   
--   _Note:_ If the <tt>a</tt> is not inferrable by type inference (like in
--   the situation above), you can specify the <tt>a</tt> using type
--   application syntax (like above).
--   
--   _Note:_ This isn't really meant to be a "final end-point", but if it
--   is used as such, a pretty-printed version will be rendered to the
--   output directory, based on the <a>Writable</a> instance of
--   <a>DExpr</a>.
dExprCompiler :: DefaultDhallResolver a => Compiler (Item (DExpr a))

-- | <a>dExprCompiler</a>, but with custom <a>DhallCompilerOptions</a>.
dExprCompilerWith :: DhallCompilerOptions a -> Compiler (Item (DExpr a))

-- | Wrapper over <a>load</a> and <a>interpretDhallCompiler</a>. Pulls up a
--   <a>DExpr</a> compiled or saved into the Hakyll cache and interprets it
--   as a value.
--   
--   Expects item at identifier to be saved as <tt><a>DExpr</a>
--   <a>X</a></tt> (possibly using <tt><a>dExprCompiler</a> @<a>X</a></tt>)
--   
--   Tracks dependencies properly, so any pages or routes that use the
--   saved Dhall expression will re-build if any of the downstream Dhall
--   files are edited.
loadDhall :: Type a -> Identifier -> Compiler (Item a)

-- | Wrapper over <a>loadSnapshot</a> and <a>interpretDhallCompiler</a>.
--   Pulls up a <a>DExpr</a> saved into the Hakyll cache as a snapshot and
--   interprets it as a value.
--   
--   Expects item at identifier to be saved as <tt><a>DExpr</a>
--   <a>X</a></tt> (possibly using <tt><a>dExprCompiler</a> @<a>X</a></tt>)
--   
--   Tracks dependencies properly, so any pages or routes that use the
--   saved Dhall expression will re-build if any of the downstream Dhall
--   files are edited.
loadDhallSnapshot :: Type a -> Identifier -> Snapshot -> Compiler (Item a)

-- | Parse the underlying text file as a Dhall expression and directly
--   interpret it as a value of the given type. Tracks all dependencies, so
--   will trigger rebuilds based on downstream changes.
dhallCompiler :: Type a -> Compiler (Item a)

-- | <a>dhallCompiler</a>, but with custom <a>DhallCompilerOptions</a>.
dhallCompilerWith :: DhallCompilerOptions X -> Type a -> Compiler (Item a)

-- | Parse a Dhall source. Meant to be useful for patterns similar to
--   <tt>dhall-to-text</tt>. If using examples from
--   <a>https://github.com/dhall-lang/dhall-text</a>, you can use:
--   
--   <pre>
--   <a>parseDhallExpr</a> <a>Nothing</a> "./make-items ./people"
--   </pre>
--   
--   Any local dependencies within the project directory (./make-items and
--   ./people above, for example) are tracked by Hakyll, and so
--   modifications to required files will also cause upstream files to be
--   rebuilt.
--   
--   To directly obtain a Dhall expression, see <a>parseDhallExpr</a>.
parseDhall :: Maybe FilePath -> Type a -> Text -> Compiler (Item a)

-- | Version of <a>parseDhall</a> taking custom
--   <a>DhallCompilerOptions</a>.
parseDhallWith :: DhallCompilerOptions X -> Maybe FilePath -> Type a -> Text -> Compiler (Item a)

-- | Version of <a>parseDhall</a> that directly returns a Dhall expression,
--   instead of trying to interpret it into a custom Haskell type.
--   
--   Any local dependencies within the project directory (./make-items and
--   ./people above, for example) are tracked by Hakyll, and so
--   modifications to required files will also cause upstream files to be
--   rebuilt.
parseDhallExpr :: DefaultDhallResolver a => Maybe FilePath -> Text -> Compiler (Expr Src a)

-- | Version of <a>parseDhallExpr</a> taking custom
--   <a>DhallCompilerOptions</a>.
parseDhallExprWith :: DhallCompilerOptions a -> Maybe FilePath -> Text -> Compiler (Expr Src a)

-- | Essentially a Dhall pretty-printer, (optional) normalizer, and
--   re-formatter. Compile the Dhall file as text according to default
--   <a>DhallCompilerOptions</a>. Note that this is polymorphic over both
--   "raw" and "fully resolved" versions; it must be called with
--   <i>TypeApplications</i>.
--   
--   <pre>
--   <a>dhallRawPrettyCompiler</a>  = <a>dhallPrettyCompiler</a> @<a>Import</a>
--   <a>dhallFullPrettyCompiler</a> = <a>dhallPrettyCompiler</a> @<a>X</a>
--   </pre>
--   
--   It might be more convenient to just use <tt>dhallRawCompiler</tt> or
--   <tt>dhallFullCompiler</tt>.
dhallPrettyCompiler :: forall a. DefaultDhallResolver a => Compiler (Item String)

-- | Compile the Dhall file as text according to default
--   <a>DhallCompilerOptions</a> while leaving all imports unchanged and
--   unresolved. Essentially a Dhall pretty-printer, (optional) normalizer,
--   and re-formatter.
dhallRawPrettyCompiler :: Compiler (Item String)

-- | Compile the Dhall file as text according to default
--   <a>DhallCompilerOptions</a>, resolving all imports in IO and tracking
--   dependencies. Essentially a Dhall pretty-printer, (optional)
--   normalizer, and re-formatter.
dhallFullPrettyCompiler :: Compiler (Item String)

-- | <a>dhallPrettyCompiler</a>, but with custom
--   <a>DhallCompilerOptions</a>.
dhallPrettyCompilerWith :: DhallCompilerOptions a -> Compiler (Item String)

-- | Format and pretty-print an <a>Expr</a> according to options in a given
--   <a>DhallCompilerOptions</a>.
renderDhallExprWith :: DhallCompilerOptions a -> Expr Src a -> Text

-- | Options for loading Dhall files.
data DhallCompilerOptions a
DCO :: DhallResolver a -> Bool -> Bool -> DhallCompilerOptions a

-- | Method to resolve imports encountered in files. See documentation of
--   <a>DhallResolver</a> for more details.
[_dcoResolver] :: DhallCompilerOptions a -> DhallResolver a

-- | Strictly for usage with <a>dhallPrettyCompiler</a> and family: should
--   the result be "minimized" (all in one line) or pretty-printed for
--   human readability?
--   
--   Can be useful for saving bandwidth.
--   
--   Default: <a>False</a>
[_dcoMinimize] :: DhallCompilerOptions a -> Bool

-- | If <a>True</a>, reduce expressions to normal form before using them.
--   Otherwise, attempts to do no normalization and presents the file as-is
--   (stripping out comments and annotations)
--   
--   Default: <a>True</a>
[_dcoNormalize] :: DhallCompilerOptions a -> Bool

-- | Types of external imports that a Dhall file may have.
data DhallCompilerTrust

-- | File on local filesystem outside of project directory, and therefore
--   not tracked by Hakyll
DCTLocal :: DhallCompilerTrust

-- | Link to remote resource over a network connection
DCTRemote :: DhallCompilerTrust

-- | Reference to environment variable on machine
DCTEnv :: DhallCompilerTrust

-- | Default <a>DhallCompilerOptions</a>. If the type variable is not
--   inferrable, it can be helpful to use <i>TypeApplications</i> syntax:
--   
--   <pre>
--   <a>defaultDhallCompilerOptions</a> @<a>Import</a>     -- do not resolve imports
--   <a>defaultDhallCompilerOptions</a> @<a>X</a>          -- resolve imports
--   </pre>
--   
--   Default values are:
--   
--   <pre>
--   <a>DCO</a>
--     { <a>_dcoResolver</a>  = <a>defaultDhallResolver</a>
--     , <a>_dcoMinimize</a>  = <a>False</a>
--     , <a>_dcoNormalize</a> = <a>True</a>
--     }
--   </pre>
defaultDhallCompilerOptions :: DefaultDhallResolver a => DhallCompilerOptions a

-- | Lens for <a>_dcoResolver</a> field of <a>DhallCompilerOptions</a>.
dcoResolver :: Functor f => LensLike f (DhallCompilerOptions a) (DhallCompilerOptions b) (DhallResolver a) (DhallResolver b)

-- | Lens for <a>_dcoMinimize</a> field of <a>DhallCompilerOptions</a>.
dcoMinimize :: Functor f => LensLike' f (DhallCompilerOptions a) Bool

-- | Lens for <a>_dcoNormalize</a> field of <a>DhallCompilerOptions</a>.
dcoNormalize :: Functor f => LensLike' f (DhallCompilerOptions a) Bool

-- | Method for resolving imports.
--   
--   The choice will determine the type of expression that
--   <tt>loadDhallExpr</tt> and family will produce.
--   
--   Note that at this moment, the only available options are "all or
--   nothing" --- either resolve all types imports completely and fully, or
--   none of them. Hopefully one day this library will offer the ability to
--   resolve only certain types of imports (environment variables, absolute
--   paths) and not others (remote network, local paths).
data DhallResolver :: Type -> Type

-- | Leave imports as imports, but optionally remap the destinations.
[DRRaw] :: {_drRemap :: Import -> Compiler (Expr Src Import)  Optionally remap the destinations.  __Important:__ '_drRemap' is /not/ applied recursively; it is only applied once.  Any imports in the resulting 'Expr Src Import' are not re-expanded.  Default: leave imports unchanged} -> DhallResolver Import

-- | Completely resolve all imports in IO. All imports within Hakyll
--   project are tracked, and changes to dependencies will trigger rebuilds
--   upstream.
[DRFull] :: {_drTrust :: Set DhallCompilerTrust  Set of "trusted" import behaviors.  Files with external references or imports that aren't described in this set are always rebuilt every time.  Default: @'S.singleton' 'DCTRemote'@  That is, do not trust any dependencies on the local disk outside of the project directory, but trust that any URL imports remain unchanged.} -> DhallResolver X

-- | Helper typeclass to allow functions to be polymorphic over different
--   <a>DhallResolver</a> types.
--   
--   Provides default behavior for each resolver type.
class DefaultDhallResolver a
defaultDhallResolver :: DefaultDhallResolver a => DhallResolver a

-- | Lens for <a>_drRemap</a> field of <a>DhallResolver</a>.
drRemap :: Functor f => LensLike' f (DhallResolver Import) (Import -> Compiler (Expr Src Import))

-- | Lens for <tt>_drFull</tt> field of <a>DhallResolver</a>.
drFull :: Functor f => LensLike' f (DhallResolver X) (Set DhallCompilerTrust)

-- | Interpret a fully resolved Dhall expression as a value of a type,
--   given a <a>Type</a>. Run in <a>Compiler</a> to integrate error
--   handling with Hakyll.
interpretDhallCompiler :: Type a -> Expr Src X -> Compiler a

-- | Version of <a>parseDhallExprWith</a> that only acceps the <a>DRRaw</a>
--   resolver, remapping the imports with the function in the <a>DRRaw</a>.
--   Does not perform any normalization.
parseRawDhallExprWith :: DhallCompilerOptions Import -> Text -> Compiler (Expr Src Import)

-- | Resolve all imports in a parsed Dhall expression.
--   
--   This implements the "magic" of dependency tracking: implemented so
--   that any local dependencies within the project directory are tracked
--   by Hakyll, and so modifications to required files will also cause
--   upstream files to be rebuilt.
resolveDhallImports :: DhallCompilerOptions X -> Maybe FilePath -> Expr Src Import -> Compiler (Expr Src X)
instance GHC.Generics.Generic (Hakyll.Web.Dhall.DhallCompilerOptions a)
instance GHC.Classes.Ord Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Classes.Eq Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Show.Show Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Generics.Generic Hakyll.Web.Dhall.DhallCompilerTrust
instance GHC.Generics.Generic (Hakyll.Web.Dhall.DExpr a)
instance (Hakyll.Web.Dhall.DefaultDhallResolver a, Data.Text.Prettyprint.Doc.Internal.Pretty a) => Data.Binary.Class.Binary (Hakyll.Web.Dhall.DExpr a)
instance Hakyll.Web.Dhall.DefaultDhallResolver Dhall.Core.Import
instance Hakyll.Web.Dhall.DefaultDhallResolver Dhall.TypeCheck.X
instance Hakyll.Web.Dhall.DefaultDhallResolver a => Data.Default.Class.Default (Hakyll.Web.Dhall.DhallCompilerOptions a)
instance Data.Text.Prettyprint.Doc.Internal.Pretty a => Hakyll.Core.Writable.Writable (Hakyll.Web.Dhall.DExpr a)
